{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" .  }}{{ template "chart.typeBadge" .  }}{{ template "chart.appVersionBadge" .  }}

[analysistemplate]: https://argoproj.github.io/argo-rollouts/features/analysis/?query=AnalysisTemplate#background-analysis
[argo_rollouts]: https://argoproj.github.io/argo-rollouts/
[bluegreen]: https://argoproj.github.io/argo-rollouts/features/bluegreen/
[canary]: https://argoproj.github.io/argo-rollouts/features/canary/
[experiment]: https://argoproj.github.io/argo-rollouts/features/experiment/
[rollout]: https://argoproj.github.io/argo-rollouts/features/specification/

This chart launches a horizontally scalable application through the use of the
Argo [`Rollout`][rollout] custom resource. See the [Argo Rollouts - Kubernetes
Progressive Delivery Controller][argo_rollouts] for more information about
how these work, and the various custom resource definitions.

## Upgrade Notes

### 1.2.x -> 1.3.x

**NEW: Allow access from cross-cluster, in-mesh services**

Beginning with this version, if your app is on the mesh, we'll create
analogous [AuthorizationPolicies](https://istio.io/latest/docs/reference/config/security/authorization-policy/) to the already existing NetworkPolicies,
as they act as drop-in replacements for a multi-clustered, multi-primary setup.

`network.allowAll`, if set, will update your NetworkPolicies to allow
access from anywhere, including  other services running in a different
cluster in a multi-cluter, multi-primary Istio environment.

**NEW: Maintenance Mode and Custom HTTP Fault Injections**

`virtualService.fault` allows you to set custom [HTTP fault injections](https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPFaultInjection)
at the client side (like delays or abort) before proxying to the service.

`virtualService.maintenanceMode.enabled` will set a very specific fault that
aborts the request with a 5xx (or whatever is set at `httpStatus`) and disable
scale-down behavior of the HPA.

If maintenanceMode is enabled, fault must be `{}`. If there's a fault configuration,
then maintenanceMode must be disabled. Otherwise the chart won't render.

### 1.1.x -> 1.2.x

**NEW: Templated Termination Grace Period**

`terminationGracePeriodSeconds` now supports template variables. This allows
one to compute the termination grace period based on additional criteria.

### 0.7.x -> 1.0.x

**BREAKING: Istio Alerts have changed**

The Istio Alerts chart was updated to 4.0.0 which updates the alert on the 5XX
rate to only aggregate per service, rather than including the client source workload.

Additionally, it added an alert which will attempt to detect if your selector
criteria is valid or not. This requires kube-state-metrics to be installed and
can be disabled via your values file if you do not wish to install
kube-state-metrics.

### 0.2.x -> 0.3.x

**BREAKING: Istio Alerts have changed**

Review https://github.com/Nextdoor/k8s-charts/pull/231 carefully - the `5xx`
and `HighLatency` alarms have changed in makeup and you may need to adjust the
thresholds for your application now.

### 0.1.x -> 0.2.x

**BREAKING: `.Values.virtualService.gateways` syntax changed**

Istio `Gateways` can live in any namespace - and it is [recommended by
Istio](https://istio.io/latest/docs/setup/additional-setup/gateway/#deploying-a-gateway)
to run the Gateways in a separate namespace from the Istio Control Plane. The
`.Values.virtualService.gateways` format now must include the namespace of the
[`Gateway`](https://istio.io/latest/docs/reference/config/networking/gateway/)
object. Eg:

_Before_
```yaml
# values.yaml
virtualService:
  namespace: istio-system
  gateways:
  - internal
```

_After_
```yaml
# values.yaml
virtualService:
  gateways:
  - istio-system/internal
```

### 0.0.x -> 0.1.x

**NEW: Optional sidecar and init containers**

We have added the ability to define init and sidecar containers for your pod.
This can be helpful if your application requires bootstrapping or additional
applications to function. They can be added via `initContainers` and
`extraContainers` parameters respectively. It is important to note that these
containers are defined using native helm definition rather than the template
scheme this chart provides.

## Rollout Resources Supported

### [`Rollout`][rollout]

The [`templates/rollout.yaml`](templates/rollout.yaml) template controls the
creation of the [`Rollout`][rollout] resource. This resource is the replacement
for the standard Kubernetes `Deployment` resource, but has two new deployment
strategies - [`BlueGreen`][bluegreen] and [`Canary`][canary].

The `.strategy` value can be set to `blueGreen` or `canary` to control which
behavior you are looking for in your `Rollout` resource. From there, you can
customize the deployment behavior through the `.blueGreen` or `.canary` values.

### [`AnalysisTemplate`][analysistemplate] (_Not Supported_)

At this time, you will need to create your own
[`AnalysisTemplate`][analysistemplate] resources to describe how to analyze the
behavior of an application and decide if it is healthy or not. In future
releases, we may build support into this chart to manage those resources.

_You can refer to an `AnalysisTemplate` you have created through the
`.blueGreen.postPromotionAnalysis`, `.blueGreen.prePromotionAnalysis` and
`.canary.analysis` parameters_.

### [`Experiment`][experiment] (_Not Supported_)

At this time, you will need to create your own [`Experiment`][experiment]
resources. These resources are highly customized, and likely not worth trying
to build in any default experiments into this chart.

## Monitoring

This chart makes the assumption that you _do_ have a Prometheus-style
monitoring endpoint configured. See the `Values.monitor.portName`,
`Values.monitor.portNumber` and `Values.monitor.path` settings for informing
the chart of where your metrics are exposed.

If you are operating in an Istio Service Mesh, see the
[Istio](#istio-networking-support) section below for details on how monitoring
works. Otherwise, see the `Values.serviceMonitor` settings to configure a
Prometheus ServiceMonitor resource to monitor your application.

## Datadog Agent Support

This chart supports operating in environments where the Datadog Agent is
running. If you set the `Values.datadog.enabled` flag, then a series of
additional Pod Annotations, Labels and Environment Variables will be
automatically added in to your deployment. See the `Values.datadog` parameters
for further information.

## Istio Networking Support

### Monitoring through the Sidecar Proxy

[metrics_merging]: https://istio.io/latest/docs/ops/integrations/prometheus/#option-1-metrics-merging

When running your Pod within an Istio Mesh, access to the `metrics` endpoint
for your Pod can be obscured by the mesh itself which sits in front of the
metrics port and may require that all clients are coming in through the
mesh natively. The simplest way around this is to use [Istio Metrics
Merging][metrics_merging] - where the Sidecar container is responsible for
scraping your application's `metrics` port, merging the metrics with its own,
and then Prometheus is configured to pull all of the metrics from the Sidecar.

There are several advantages to this model.

* It's much simpler - developers do not need to create `ServiceMonitor` or
  `PodMonitor` resources because the Prometheus system is already configured to
  discover all `istio-proxy` sidecar containers and collect their metrics.

* Your application is not exposed outside of the service mesh to anybody - the
  `istio-proxy` sidecar handles that for you.

* There are fewer individual configurations for Prometheus, letting it's
  configuration be simpler and lighter weight. It runs fewer "scrape" jobs,
  improving its overall performance.

This feature is turned on by default if you set `Values.istio.enabled=true` and
`Values.monitor.enabled=true`.

## Secrets
A `Secret`, `KMSSecret`, or `SealedSecret` resource would be created and mounted into the container
based upon the `Values.secrets` and `Values.secretsEngine` being populated.
The `Secret` resource is generally used for local dev and/or CI test.
Secret` resources can be created by setting the following:
```
secrets:
  FOO_BAR: my plaintext secret
secretsEngine: plaintext
```
Alternatively, `KMSSecret` can be generated using the following example:
```
secrets:
  FOO_BAR: AQIA...
secretsEngine: kms
kmsSecretsRegion: us-west-2 (AWS region where the KMS key is located)
```
Or, alternatively, `SealedSecret` can be generated using the following example:
```
secrets:
  FOO_BAR: AQIA...
secretsEngine: sealed
```

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
