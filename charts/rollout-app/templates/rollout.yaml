{{/*
Figure out if we are launching a rollout deployment for each Zone in the cluster (along
with its own HPAs), or if we're launching just one standard rollout deployment.

If we launch a deployment per-zone, then we do some name and label patching to
make sure that each rollout is scaled up separately from the next one.
*/}}
{{- $rolloutZones := default (list "default") .Values.rolloutZones }}
{{- $deactivateHpaForMaintenance := false }}

{{/*
If we are transitioning from a single rollout deployment to multiple rollout deployments,
we need to add the "default" zone to the list of zones in order to ensure that there
are still pods up and running during the transition. The same logic holds true for when you switch
from multiple rollout deployments to a single rollout deployment.
*/}}
{{- if .Values.rolloutZonesTransition }}
{{- $rolloutZones = prepend $rolloutZones "default" }}
{{- end }}

{{/* The default fullName field here... we override it and append to it as we loop through $rolloutZones */}}
{{- $fullName := include "nd-common.fullname" . }}

{{/*
For users who are migrating from `simple-app` to `rollout-app`, they are able to specify their
deployment name. This is a combination of the release name hyphenated with the chart name, or a user specified deployment reference name.
Similar to $fullName, we override it and append to it as we loop through $rolloutZones.
*/}}
{{- $prevDeployment := default (default .Chart.Name .Values.nameOverride) (.Values.migrate.workloadRef.name) }}
{{- $deploymentRefName := printf "%s-%s" (.Release.Name) ($prevDeployment) }}

{{/* Verify that some required inputs are supplied */}}
{{- if .Values.virtualService.enabled }}
  {{- $readinessProbe := required "readinessProbe is required" .Values.readinessProbe }}
{{- end }}

{{/* 
By default, we do run the topology spread function - letting it decide
whether or not to spread by AZ. However, in the per-zone rollouts we always
disable this.
*/}}
{{- $disableTopoSpreadFunction := false }}

{{/* The default rolloutZoneLabel is left empty. We patch it as we loop through $rolloutZones */}}
{{- $rolloutZoneLabel := "" }}

{{/* Iterate through the rollout zones now */}}
{{- range $rolloutZone := index $rolloutZones }}

{{/*
If $rolloutZone is NOT "default", then we know we're creating a Rollout per zone. 
In that case, we patch a few variables to be zone-specific.
*/}}
{{- if ne $rolloutZone "default" }}
{{- $topologyKey               := required ".Values.rolloutZones requires that .Values.topologyKey is also set" $.Values.topologyKey }}
{{- $fullName                  = printf "%s-%s" (include "nd-common.fullname" $) $rolloutZone }}
{{- $deploymentRefName         = printf "%s-%s" $deploymentRefName $rolloutZone }}
{{- $rolloutZoneLabel          = printf "%s: %s" $topologyKey $rolloutZone }}
{{- $disableTopoSpreadFunction = true }}
{{- else }}
{{- $fullName                  = include "nd-common.fullname" $ }}
{{- end }}

---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "rollout-app.labels" $ | nindent 4 }}
    {{- with $rolloutZoneLabel }}
    {{ . }}
    {{- end }}
  {{- if $.Values.rolloutAnnotations }}
  annotations:
    {{- range $annotation, $value := index $.Values.rolloutAnnotations }}
    {{ $annotation }}: {{ tpl $value $ | quote }}
    {{- end }}
  {{- end }}
spec:
  {{- with $.Values.minReadySeconds }}
  minReadySeconds: {{ . }}
  {{- end }}
  {{- with $.Values.progressDeadlineSeconds }}
  progressDeadlineSeconds: {{ . }}
  {{- end }}
  {{- if and $.Values.replicaCount (not $.Values.autoscaling.enabled) }}
  replicas: {{ $.Values.replicaCount }}
  {{- end }}
  {{- with $.Values.revisionHistoryLimit }}
  revisionHistoryLimit: {{ . }}
  {{- end }}
  selector:
    matchLabels:
      {{- /* When migrating from a Deployment, the selector actually needs to match the original Deployment's labels. */}}
      {{- if $.Values.migrate.inProgress }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
      app.kubernetes.io/name: {{ $.Values.migrate.workloadRef.name }}
      helm.sh/chart-name: simple-app
      {{- else }}
      {{- include "nd-common.selectorLabels" $ | nindent 6 }}
      {{- with $rolloutZoneLabel }}
      {{ . }}
      {{- end }}
      {{- end }}  
  {{- if $.Values.migrate.inProgress }}
  workloadRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ $deploymentRefName }}
    scaleDown: {{ $.Values.migrate.workloadRef.scaleDown }}
  {{- end }}
  strategy:
    {{- if (eq $.Values.strategy "blueGreen") }}
    blueGreen:
      {{- $fullName = include "nd-common.fullname" $ }}
      {{- if or $.Values.virtualService.enabled $.Values.ingress.enabled }}
      {{- /*
      For users who are migrating from a Deployment to BlueGreen rollouts, we need to use the previous Deployment's service name as the activeService.
      The service name is similar to $deploymentRefName, however, the rolloutZoneLabel is not included. The preview service should also not be included.
      */}}
      {{- if $.Values.migrate.inProgress }}
      activeService: {{ printf "%s-%s" ($.Release.Name) ($prevDeployment) }}
      previewService: null
      {{- else }}
      activeService: {{ $fullName }}
      previewService: {{ $fullName }}-preview
      {{- end }}
      {{- end }}

      {{- with $.Values.blueGreen.autoPromotionEnabled }}
      autoPromotionEnabled: {{ . }}
      {{- end }}

      {{- with $.Values.blueGreen.autoPromotionSeconds }}
      autoPromotionSeconds: {{ int . }}
      {{- end }}

      {{- with $.Values.blueGreen.previewReplicaCount }}
      previewReplicaCount: {{ int . }}
      {{- end }}

      {{- with $.Values.blueGreen.maxUnavailable }}
      maxUnavailable: {{ . }}
      {{- end }}

      {{- with $.Values.blueGreen.prePromotionAnalysis }}
      prePromotionAnalysis:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.blueGreen.postPromotionAnalysis }}
      postPromotionAnalysis:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.blueGreen.scaleDownDelaySeconds }}
      scaleDownDelaySeconds: {{ int . }}
      {{- end }}

      {{- with $.Values.blueGreen.scaleDownDelayRevisionLimit }}
      scaleDownDelayRevisionLimit: {{ int . }}
      {{- end }}

      {{- with $.Values.blueGreen.antiAffinity }}
      antiAffinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

    {{- else if (eq $.Values.strategy "canary") }}
    canary:
      {{- /*
      During a migration, since we reference a previous Deployments service, we do not want to supply VirtualService values here,
      otherwise we will run into selector misalignments.
      */}}
      {{- if not $.Values.migrate.inProgress }}
      {{- if or $.Values.virtualService.enabled $.Values.ingress.enabled }}
        {{/*
        If you have multiple rollouts, then it does not make sense to have *multiple* virtual services as well.
        In addition to that, Argo Rollouts will not let multiple rollouts reference the same virtual service,
        meaning that you cannot share a virtual service between multiple rollouts. Thus, this is why failing here
        is necessary. For context on where Argo Rollouts fails, see:
        https://github.com/argoproj/argo-rollouts/blob/76cfc0e58892ed9759c1a732e243f75aed2fc6bd/utils/conditions/conditions.go#L158
        */}}
        {{- if and (gt (len $.Values.rolloutZones) 0) ($.Values.virtualService.enabled) -}}
        {{- fail (printf "Invalid spec, multiple zones cannot be configured with virtual services enabled") }}
        {{- end }}
      stableService: {{ $fullName }}
      canaryService: {{ $fullName }}-canary
      {{ end }}

      {{- if or $.Values.virtualService.enabled $.Values.ingress.enabled }}
      trafficRouting:
        {{- if $.Values.virtualService.enabled }}
        istio:
          virtualService:
            name: {{ $fullName }}
        {{- end }}
        {{- if $.Values.ingress.enabled }}
        alb:
          ingress: {{ $fullName }}
          servicePort: {{ default (first $.Values.ports).containerPort $.Values.ingress.port }}
        {{- end }}
      {{- end }}

      {{- end }}

      {{- with $.Values.canary.canaryMetadata }}
      canaryMetadata:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.canary.stableMetadata }}
      stableMetadata:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.canary.maxUnavailable }}
      maxUnavailable: {{ . }}
      {{- end }}

      {{- with $.Values.canary.maxSurge }}
      maxSurge: {{ . }}
      {{- end }}

      {{- with $.Values.canary.dynamicStableScale }}
      dynamicStableScale: {{ . }}
      {{- end }}

      {{- with $.Values.canary.abortScaleDownDelaySeconds }}
      abortScaleDownDelaySeconds: {{ int . }}
      {{- end }}

      {{- with $.Values.canary.scaleDownDelaySeconds }}
      scaleDownDelaySeconds: {{ int . }}
      {{- end }}

      {{- with $.Values.canary.scaleDownDelayRevisionLimit }}
      scaleDownDelayRevisionLimit: {{ int . }}
      {{- end }}

      {{- with $.Values.canary.analysis }}
      analysis:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.canary.antiAffinity }}
      antiAffinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.canary.steps }}
      steps:
        {{- toYaml . | nindent 8 }}
      {{- end }}

    {{- else }}
    {{- fail (printf "Must set $.Values.strategy to 'blueGreen' or 'canary', '%s' is invalid" $.Values.strategy) }}
    {{- end }}
  {{- /*
  When you are migrating from a regular Deployment, Argo Rollouts will use the previous Deployment's pods as the template.
  Thus, we need to leave the template field as an empty object for Argo Rollouts to flesh out. Otherwise, you get the error:
  The Rollout is invalid: spec.template: Internal error: template must be empty for workload reference rollout
  */}}
  {{- if $.Values.migrate.inProgress }}
  template: {}
  {{- else }}
  template:
    metadata:
      annotations:
        checksum/secrets: {{ toYaml $.Values.secrets | sha256sum }}
        {{- include "nd-common.istioAnnotations" $ | nindent 8 }}
        {{- include "nd-common.datadogAnnotations" $ | nindent 8 }}
        {{- with $.Values.podAnnotations }}
        {{- range $annotation, $value := index . }}
        {{ $annotation }}: {{ tpl $value $ | quote }}
        {{- end }}
        {{- end }}
      labels:
        {{- include "rollout-app.labels" $ | nindent 8 }}
        {{- include "nd-common.istioLabels" $ | nindent 8 }}
        {{- with $.Values.podLabels }}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        {{- with $rolloutZoneLabel }}
        {{ . }}
        {{- end }}
    spec:
      {{- with $.Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      nodeSelector:
        {{- with $rolloutZoneLabel }}
        {{ . }}
        {{- end }}
        {{- include "nd-common.nodeSelector" $ | nindent 8 }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if not $disableTopoSpreadFunction }}
      {{- if or $.Values.topologySpreadConstraints $.Values.enableTopologySpread }}
      topologySpreadConstraints:
        {{- include "nd-common.topologySpreadConstraints" $ | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ include "nd-common.serviceAccountName" $ }}
      {{- with $.Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ tpl (toString . ) $ }}
      {{- end }}
      {{- if or $.Values.volumes $.Values.volumesString }}
      volumes:
        {{- with $.Values.volumes }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- with $.Values.volumesString }}{{ tpl . $ | nindent 8 }}{{ end }}
      {{- end }}
      {{- with $.Values.initContainers}}
      initContainers:
        {{- range $initContainer := index .}}
        - {{- tpl (toString (toYaml $initContainer)) $ | nindent 10 }}
        {{- end }}
      {{- end }}
      containers:
        {{- with $.Values.extraContainers}}
        {{- range $extraContainer := index .}}
        - {{- tpl (toString (toYaml $extraContainer)) $ | nindent 10 }}
        {{- end }}
        {{- end }}
        {{- if $.Values.proxySidecar.enabled }}
        - name: {{ $.Values.proxySidecar.name }}
          image: {{ include "rollout-app.proxyImageFqdn" $ }}
          imagePullPolicy: {{ $.Values.proxySidecar.image.pullPolicy }}
          {{- with $.Values.preStopCommand }}
          lifecycle:
            preStop:
              exec:
                command:
                  {{ toYaml . | nindent 18 }}
          {{- end }}

          {{- with $.Values.proxySidecar.envFrom }}
          envFrom:
            {{- range $env := index .}}
            {{- with $env.configMapRef }}
            - configMapRef:
                name: {{ tpl (required ".name key must be set in configMapRef" .name) $ }}
            {{- end }}
            {{- with $env.secretRef }}
            - secretRef:
                name: {{ tpl (required ".name key must be set on secretRef" .name) $ }}
            {{- end }}
            {{- end }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.proxySidecar.env }}
          env:
            {{- range $env := index . }}
            - name: {{ tpl $env.name $ }}
              {{- if $env.value }}
              value: {{ tpl $env.value $ | quote }}
              {{- else if $env.valueFrom }}
              valueFrom: {{ tpl (toYaml $env.valueFrom) $ | nindent 16 }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- with $.Values.proxySidecar.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if $.Values.ports }}
          ports:
            {{- include "rollout-app.containerPorts" $ | nindent 12 }}
          {{- end }}
          {{- with $.Values.startupProbe }}
          startupProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.livenessProbe }}
          livenessProbe:
            {{- if $.Values.enableOnlyGRPCProbing }}
            {{- $probe := omit . "httpGet" }}
            {{- toYaml $probe | nindent 12 }}
            {{- else }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- with $.Values.readinessProbe }}
          readinessProbe:
            {{- if $.Values.enableOnlyGRPCProbing }}
            {{- $probe := omit . "httpGet" }}
            {{- toYaml $probe | nindent 12 }}
            {{- else }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          resources:
            {{- toYaml $.Values.proxySidecar.resources | nindent 12 }}
        {{- end }}
        - name: {{ include "nd-common.containerName" $ }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: {{ include "nd-common.imageFqdn" $ }}
          {{- with $.Values.command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          {{- with $.Values.preStopCommand }}
          lifecycle:
            preStop:
              exec:
                command:
                  {{- toYaml . | nindent 18 }}
          {{- end }}
          {{- if or $.Values.envFrom $.Values.secrets }}
          envFrom:
            {{- if $.Values.secrets }}
            - secretRef:
                name: {{ include "nd-common.fullname" $ }}-secrets
            {{- end }}
            {{- with $.Values.envFrom}}
            {{- range $env := index .}}
            {{- with $env.configMapRef }}
            - configMapRef:
                name: {{ tpl (required ".name key must be set in configMapRef" .name) $ }}
            {{- end }}
            {{- with $env.secretRef }}
            - secretRef:
                name: {{ tpl (required ".name key must be set on secretRef" .name) $ }}
            {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if or $.Values.env $.Values.datadog.enabled }}
          env:
            {{- with $.Values.env }}
            {{- range $env := index . }}
            - name: {{ tpl $env.name $ }}
              {{- if $env.value }}
              value: {{ tpl $env.value $ | quote }}
              {{- else if $env.valueFrom }}
              valueFrom: {{ tpl (toYaml $env.valueFrom) $ | nindent 16 }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- include "nd-common.datadogEnv" $ | nindent 12 }}
          {{- end }}

          {{- with $.Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml $.Values.resources | nindent 12 }}
          {{- if not $.Values.proxySidecar.enabled }}
          ports:
            {{- include "rollout-app.containerPorts" $ | nindent 12 }}
            {{- include "nd-common.monitorPodPorts" $ | nindent 12 }}
          {{- end }}
          {{- with $.Values.startupProbe }}
          startupProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.livenessProbe }}
          livenessProbe:
            {{- if $.Values.enableOnlyGRPCProbing }}
            {{- $probe := omit . "httpGet" }}
            {{- toYaml $probe | nindent 12 }}
            {{- else }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- with $.Values.readinessProbe }}
          readinessProbe:
            {{- if $.Values.enableOnlyGRPCProbing }}
            {{- $probe := omit . "httpGet" }}
            {{- toYaml $probe | nindent 12 }}
            {{- else }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
  {{- end }}
---
{{- end }}
