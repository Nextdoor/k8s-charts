# This identifies all of the resources as belonging to this particular chart,
# even though they will ultimately be named likely by the parent chart that
# uses this as a dependency.
chart_name: istio-alerts
chart_source: https://github.com/Nextdoor/k8s-charts

# PagerDuty AlertManager Configuration
#
# If enabled, configures individual AlertmanagerConfig resources in your
# namespace to route any PrometheusRules that are firing to your particular
# PagerDuty Routing Key.
alertManager:
  # -- Not enabled by default - flip this to true to enable this resource.
  enabled: false

  # -- Which AlertManager should this config be picked up by?
  alertmanagerConfig: default

  # -- The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  #
  # To aggregate by all possible labels use the special value '...' as the
  # sole label name, for example:
  #
  # group_by: ['...']
  # This effectively disables aggregation entirely, passing through all
  # alerts as-is. This is unlikely to be what you want, unless you have
  # a very low alert volume or your upstream notification system performs
  # its own grouping.
  #
  groupBy: [alertname, namespace]

  # -- How long to initially wait to send a notification for a group of alerts.
  # Allows to wait for an inhibiting alert to arrive or collect more initial
  # alerts for the same group. (Usually ~0s to few minutes.)
  groupWait: 30s

  # -- How long to wait before sending a notification about new alerts that
  # are added to a group of alerts for which an initial notification has
  # already been sent. (Usually ~5m or more.)
  groupInterval: 5m

  # -- How long to wait before sending a notification again if it has already
  # been sent successfully for an alert. (Usually ~3h or more).
  repeatInterval: 1h

  # If the pagerduty.routing_key or pagerduty.routing_key_parameter are set,
  # then the AlertmanagerConfig will be created in the namespace. Otherwise it
  # will not be.
  #
  # pagerduty:
  #
  #   # If supplied - this is the path to an AWS SSM Parameter. This requires
  #   # that the ExternalSecret controller is in place and has access to read
  #   # these values:
  #   #
  #   # https://external-secrets.io/provider-aws-secrets-manager/
  #   routing_key_parameter:
  #   # If you use $routing_key_parameter, you must also pass in this:
  #   routing_key_store_ref:
  #
  #   # This is the raw routing_key string - just directly copied in.
  #   routing_key:

# Defaults applied to all Prometheus Rules
defaults:
  # -- The prefix URL to the runbook_urls that will be applied to each PrometheusRule
  runbookUrl: https://github.com/Nextdoor/k8s-charts/blob/main/charts/istio-alerts/runbook.md
  # -- Additional custom labels attached to every PrometheusRule
  additionalRuleLabels: {}

# Service Rules
#
# These rules provide some basic alerting around performance of any VirtualServices
# in the target namespace.
#
serviceRules:
  # -- Whether to enable the service rules template
  enabled: true

  # -- Narrow down the alerts to a particular Destination Service if there
  # are multiple services that require different thresholds within the same
  # namespace.
  destinationServiceName: .*

  # -- Configuration related to the 5xx monitor for the VirtualService.
  http5XXMonitor:
    # -- Whether to enable the monitor on 5xxs returned by the VirtualService.
    enabled: true

    # -- How long to evaluate the rate of 5xxs over.
    for: 5m

    # -- The threshold for considering the 5xx monitor to be alarming. Default
    # is 0.05% error rate, i.e 99.95% reliability.
    threshold: 0.0005

    # -- Severity of the 5xx monitor
    severity: critical

  highRequestLatency:
    # -- Whether to enable the monitor on latency returned by the
    # VirtualService.
    enabled: true

    # -- Which percentile to monitor - should be between 0 and 1. Default is
    # 95th percentile.
    percentile: 0.95

    # -- Severity of the latency monitor
    severity: warning

    # -- The threshold for considering the latency monitor to be alarming. This
    # is in seconds.
    threshold: 0.5

    # -- How long to evaluate the latency of services.
    for: 15m
  
  destinationServiceSelectorValidity:
    sevarity: warning
    for: 1h
